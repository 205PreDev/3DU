요구사항 정의 및 분석 명세서

교육용 3D 물리 시뮬레이터 - 야구 투구 모듈

**문서 버전**: v3 (2025-10-27)


목차

1. 프로젝트명 및 프로젝트 기간
2. 프로젝트 요약 및 주요 기능
   2.1 프로젝트 요약
   2.2 주요 기능
3. 요구사항 명세
   3.1 비즈니스 요구사항
   3.2 시스템 장비 구성 요구사항
   3.3 기능 요구사항
     FR-001: 시뮬레이션 실행 (단일 모드)
     FR-002: 파라미터 조정 (3단 구조)
     FR-003: 물리 계산 엔진
     FR-004: 3D 시각화
     FR-005: 결과 분석
     FR-006: 물리력 벡터 시각화
     FR-007: 리플레이 및 슬로우 모션
     FR-008: 다중 카메라 앵글
     FR-009: 사용자 계정 시스템
     FR-010: 시뮬레이션 저장 및 공유
     FR-011: 미니게임 모드
     FR-012: 리더보드 및 랭킹
     FR-013: 확장 가능한 아키텍처 시스템
     FR-014: 비교 모드 (신규)
   3.4 성능 요구사항
   3.5 인터페이스 요구사항
   3.6 데이터 요구사항
   3.7 테스트 요구사항
   3.8 보안 요구사항
   3.9 품질 요구사항
   3.10 제약사항
   3.11 프로젝트 관리 요구사항
   3.12 프로젝트 지원 요구사항
4. 요구사항 상세 내역 작성 및 검토
5. 용어 사전


1. 프로젝트명 및 프로젝트 기간

프로젝트명: 교육용 3D 물리 시뮬레이터 (Educational 3D Physics Simulator)


2. 프로젝트 요약 및 주요 기능

2.1 프로젝트 요약

본 프로젝트는 물리학 원리를 시각적으로 이해할 수 있도록 돕는 웹 기반 3D 물리 시뮬레이터입니다. 1차 모듈로 야구 투구 시뮬레이터를 개발하며, 중력, 공기저항(항력), 마그누스 효과를 실시간으로 계산하고 3D로 시각화합니다.

학생들이 물리 법칙을 직관적으로 학습할 수 있도록 3단 구조의 파라미터 입력(공 물성, 투구 조건, 환경 변수)을 제공하며, 실시간 궤적 애니메이션과 상세한 결과 분석 기능을 포함합니다.

핵심 차별점:
  - 확장 가능한 아키텍처: Generic 타입 시스템 + Template Method 패턴을 통해 신규 물리 시나리오 추가 시 80% 이상 코드 재사용
  - 물리력 시각화: 공에 작용하는 힘(중력, 항력, 마그누스력)을 3D 화살표로 실시간 표시
  - 리플레이 기능: 동일 조건 재생, 다양한 카메라 앵글, 슬로우 모션 지원
  - 카메라 프리셋 버튼: 포수 시점, 측면, 투수 시점 전환 UI
  - 리플레이 컨트롤: Play/Pause, 속도 조절(0.5x~2x), 진행률 슬라이더
  - 소셜 기능: 사용자 계정, 시뮬레이션 공유, 미니게임 모드
  - 저사양 최적화: Intel 9세대 CPU급 일반 PC에서도 원활한 실행 보장

2.2 주요 기능

1. 물리 시뮬레이션 엔진
   - 중력, 항력, 마그누스 효과를 반영한 정밀 궤적 계산
   - Euler Method 및 RK4(Runge-Kutta 4차) 수치 적분 지원
   - 실시간 물리 계산 (< 100ms)

2. 3D 시각화 및 물리력 가시화
   - Three.js 기반 실시간 3D 렌더링 (저사양 최적화)
   - 공의 궤적 애니메이션 (30fps 이상, Intel 9세대 CPU 기준)
   - 카메라 회전/줌/팬 컨트롤
   - 물리력 벡터 표시: 중력(파란색), 항력(빨간색), 마그누스력(녹색) 화살표
   - 회전 방향 시각화: 공의 스핀 축을 회전 화살표로 표시
   - 클로즈업 모드: 공을 따라가는 카메라, 힘의 방향 상세 관찰

3. 리플레이 및 분석 기능
   - 시뮬레이션 재생(동일 조건 반복)
   - 다양한 카메라 앵글: 포수 시점, 투수 시점, 측면 시점, 공 추적 모드
   - 재생 속도 조절: 1x, 0.5x, 0.25x (슬로우 모션)
   - 특정 시점 일시정지 및 힘 벡터 분석

4. 사용자 인터페이스
   - 단일 모드 (모드 토글 제거): 교육용 목적에 집중
   - 파라미터 3단 구조:
     1) 공 물성: 질량, 반지름, 항력계수, 양력계수 (사용자 직접 입력)
     2) 투구 조건: 속도, 각도, 회전수(X/Y/Z축), 릴리스 포인트(X/Y/Z 3D 좌표)
     3) 환경 변수: 중력(9.78~9.83), 온도, 기압, 습도 → 공기밀도 자동 계산
   - 구종별 입력 예시 가이드 제공 (프리셋 제거됨, 직접 입력 방식으로 변경)
   - 실시간 수치 표시: 릴리즈 순간 속도, 회전수, 플레이트 도착 속도

5. 결과 분석
   - 비행 시간, 최고 높이, 홈플레이트 도달 높이
   - 수평/수직 변화량
   - 스트라이크/볼 판정
   - 릴리즈 순간 vs 도착 순간 속도 비교
   - 회전수(rpm) 및 회전 효율

6. 소셜 및 게임 기능
   - 사용자 계정 시스템 (회원가입/로그인)
   - 시뮬레이션 저장 및 공유 (URL 공유)
   - 미니게임 모드:
     - 스트라이크 존 맞추기 챌린지
     - 특정 구종 재현하기
     - 최대 변화량 경쟁
   - 리더보드 (미니게임 점수 순위)
   - 내 시뮬레이션 기록 저장 (최대 10개)

7. 비교 모드 (신규)
   - 저장된 2개 시뮬레이션 동시 비교
   - 환경 변수 독립/통일 선택
   - 궤적 색상 구분 (파랑/빨강)
   - 계측값 표 및 차이값 표시
   - 리플레이 동기화 재생

8. UI 네비게이션 및 사용자 경험 개선
   - 상단 네비게이션 바: 뒤로가기, 시나리오 이름, 도움말, 사용자 메뉴
   - 우측 패널 탭 구조: 파라미터/결과/최근 실험/비교 4개 탭
   - 도움말 모달: 시작하기, 키보드 단축키, FAQ 3개 탭
   - 최근 실험 기능: LocalStorage 기반 클라이언트 저장 (최대 10개)
   - 실험 상세 보기: 모든 파라미터 및 결과 수치 표시


3. 요구사항 명세

3.1 비즈니스 요구사항

3.1.1 비즈니스 목표

  - 교육 목표: 고등학교 및 대학교 물리 교육에서 운동학, 역학, 유체역학 원리를 시각적으로 학습할 수 있는 도구 제공
  - 학습 효과 향상: 이론만으로 이해하기 어려운 마그누스 효과, 공기저항 등을 직관적으로 체험
  - 확장성 확보: 향후 포물선 운동, 진자 운동 등 다양한 물리 시나리오로 확장 가능한 플랫폼 구축
  - 사업성 확보:
    - B2B 판매: 교육기관(학교, 학원) 대상 라이선스 판매
    - 프리미엄 기능: 무료 기본 버전 + 유료 고급 기능 (더 많은 구종, 상세 분석)
    - 광고 수익: 무료 사용자 대상 교육 관련 광고
    - 플랫폼 확장: 야구 외 다른 스포츠/물리 시나리오 DLC 판매

3.1.2 범위

포함 범위:
  - 야구 투구 시뮬레이터 (1차 모듈)
  - 풀스택 시스템 (프론트엔드 + 백엔드 서버)
  - 웹 브라우저 기반 실행 (별도 설치 불필요)
  - 15개 파라미터 직접 입력 UI (프리셋 제거됨)
  - 물리 계산 및 3D 시각화
  - 파라미터 3단 구조 (공 물성, 투구 조건, 환경 변수)
  - 환경 변수 기반 공기밀도 자동 계산
  - 물리력 벡터 시각화 (힘의 방향 화살표)
  - 리플레이 및 슬로우 모션 기능
  - 사용자 계정 시스템 (회원가입/로그인)
  - 시뮬레이션 저장 및 공유
  - 비교 모드 (2개 시뮬레이션 동시 비교) ← v2 신규
  - 미니게임 모드 (스트라이크 존 챌린지 등)
  - 리더보드 및 랭킹 시스템
  - 저사양 PC 최적화 (Intel 9세대 CPU급)

제외 범위:
  - 모바일 앱 네이티브 버전 (모바일 웹은 지원)
  - 실시간 멀티플레이어 대전
  - 실제 MLB/KBO 경기 데이터 연동
  - 세밀한 투수/포수 3D 모델 (간단한 실루엣만 제공)
  - 투구 폼 애니메이션 (오버핸드/사이드암/언더핸드 구분 없음, 릴리즈 포인트만 설정 가능)
  - 좌완/우완 구분 없음 (중앙에서 투구)

3.1.3 이해관계자

[표 삽입: 프로젝트 이해관계자 및 역할 명세표]
- 항목: 이해관계자명, 역할, 주요 관심사, 영향도
- 예시 행: 학생(1차 사용자), 물리 교육 도구 활용, 직관적 학습, 높음
- 예시 행: 교사(2차 사용자), 수업 시연 활용, 파라미터 조정 기능, 중간
- 예시 행: 개발팀, 시스템 개발 및 유지보수, 기술적 실현 가능성, 높음
- 예시 행: 교육기관, B2B 고객, 가격 및 라이선스, 중간

3.1.4 중요한 품질

[표 삽입: 품질 속성 우선순위표]
- 항목: 품질 속성, 우선순위(상/중/하), 측정 지표, 목표값
- 예시 행: 성능, 상, 시뮬레이션 계산 시간, < 100ms
- 예시 행: 사용성, 상, 5분 내 시뮬레이션 성공률, > 90%
- 예시 행: 신뢰성, 중, 물리 계산 정확도, 오차 < 5%
- 예시 행: 확장성, 상, 신규 시나리오 추가 시 코드 재사용률, > 80%

3.1.5 대상 사용자

1. 1차 사용자 (학생)
   - 물리 기초: 고등학교 물리 I 수준 이상
   - 컴퓨터 활용 능력: 웹 브라우저 사용 가능
   - 연령대: 16세 이상

2. 2차 사용자 (교사)
   - 물리 전공자
   - 수업 시연용 활용
   - 파라미터 조정을 통한 심화 실험

3.1.6 사용자 혜택

  - 학생: 추상적인 물리 개념을 시각적으로 이해, 흥미도 증가
  - 교사: 실험 준비 없이 즉시 시연 가능, 반복 실험 용이
  - 비용 절감: 실제 장비 없이 물리 실험 수행
  - 접근성: 인터넷 연결만 있으면 언제 어디서나 학습 가능

3.1.7 보안 문제

  - 개인정보 미수집: 사용자 데이터 저장 없음 (프론트엔드 전용)
  - 클라이언트 보안: 악성 스크립트 삽입 방지
  - 소스 코드 보호: 학술 프로젝트이므로 오픈소스 공개 가능


3.2 시스템 장비 구성 요구사항

3.2.1 물리적 운영 요구사항

클라이언트(사용자) 시스템:

[표 삽입: 하드웨어 개발 환경 사양표 - 클라이언트 요구사항]
- 항목: 구분, 최소 사양, 권장 사양
- 예시 행: CPU, Intel Core i3 9세대 / AMD Ryzen 3 3000시리즈, Intel Core i5 10세대 이상
- 예시 행: RAM, 4GB, 8GB 이상
- 예시 행: GPU, 통합 그래픽(Intel UHD 630), 독립 그래픽(NVIDIA GTX 1050 이상)
- 예시 행: 디스플레이, 1366 x 768 해상도, 1920 x 1080 해상도
- 예시 행: 웹 브라우저, Chrome 90+ / Firefox 88+, Chrome 최신 버전

서버 요구사항:
  - 백엔드 서버: Node.js 기반 REST API 서버
    - CPU: 2 Core 이상
    - 메모리: 2GB RAM 이상
    - 스토리지: 20GB (DB 포함)
  - 데이터베이스: PostgreSQL 또는 MongoDB
    - 용량: 5GB 이상
    - 동시 접속: 100명 기준
  - 호스팅: AWS, GCP, Heroku 등 클라우드 플랫폼
  - 트래픽: 월 1,000명 기준 약 100GB

3.2.2 소프트웨어 자원 요구사항

개발 환경:
  - Node.js 18.x 이상
  - npm 9.x 이상
  - 코드 에디터: VS Code 권장
  - Git 버전 관리

실행 환경:
  - 웹 브라우저:
    - Chrome 90 이상 (권장)
    - Firefox 88 이상
    - Edge 90 이상
    - Safari 14 이상
  - WebGL 2.0 지원 필수

개발 라이브러리:
  - React 18.x
  - TypeScript 5.x
  - Three.js (via @react-three/fiber)
  - Vite (빌드 도구)

3.2.3 설치 요구사항

사용자:
  - 설치 불필요 (웹 브라우저로 접속만 하면 됨)
  - 첫 로딩 시 자동으로 필요한 리소스 다운로드 (약 2MB)


3.3 기능 요구사항

3.3.1 기능 상황도 (Functional Context Diagram)

[다이어그램 삽입: 시스템 컨텍스트 다이어그램 (mermaid/1-architecture.mmd)]
- 외부 엔터티: 사용자(학생/교사), 웹 브라우저, 백엔드 서버, 데이터베이스
- 시스템 경계: 교육용 3D 물리 시뮬레이터
- 주요 인터페이스: 파라미터 입력, 3D 시각화 출력, 데이터 저장/조회

3.3.2 유즈케이스 다이어그램

[다이어그램 삽입: 유즈케이스 다이어그램]
- 액터: 비로그인 사용자, 로그인 사용자, 시스템 관리자
- 주요 유즈케이스:
  - 단순 모드 시뮬레이션 실행
  - 전문가 모드 파라미터 조정
  - 3D 궤적 시각화 관찰
  - 물리력 벡터 표시
  - 리플레이 및 슬로우 모션 재생
  - 회원가입/로그인
  - 시뮬레이션 저장 및 공유
  - 미니게임 참여
  - 리더보드 조회

3.3.3 상세 기능 요구사항

FR-001: 시뮬레이션 실행 (단일 모드)

[표 삽입: FR-001 상세 기능 명세표]
- 항목: 기능 ID, 기능명, 상세 설명, 우선순위, 입력, 출력, 비고
- 내용:
  - 기능 ID: FR-001
  - 기능명: 시뮬레이션 실행 (단일 모드)
  - 상세 설명: 단일 모드로 시뮬레이션 실행 (Simple/Advanced 모드 구분 제거)
  - 우선순위: 상
  - 입력: 3단 구조 파라미터 (ball, initial, environment)
  - 출력: 3D 궤적 애니메이션, 비행 시간, 최고 높이, 스트라이크 판정
  - 비고: 교육용 목적에 집중, 모드 전환 혼란 제거

FR-002: 파라미터 조정 (3단 구조)

[표 삽입: FR-002 상세 기능 명세표]
- 항목: 기능 ID, 기능명, 상세 설명, 우선순위, 입력, 출력, 비고
- 내용:
  - 기능 ID: FR-002
  - 기능명: 파라미터 조정 (3단 구조)
  - 상세 설명:
    1) 공 물성: 질량, 반지름, 항력계수(C_d), 양력계수(C_L)
    2) 투구 조건: 초기 속도, 발사각, 회전수(X/Y/Z축), 릴리스 포인트(X/Y/Z 3D 좌표)
    3) 환경 변수: 중력(9.78~9.83), 온도, 기압, 습도 → 공기밀도 자동 계산
  - 릴리스 포인트 3D 좌표:
    * 기존 releaseHeight 제거, releasePoint: Vector3 { x, y, z } 통합
    * X축: 좌우 위치 (양수 = 1루, 음수 = 3루)
    * Y축: 높이 (투구 폼별)
    * Z축: 전후 위치 (마운드 기준)
    * 투구 폼별 예시 가이드 제공 (오버핸드/사이드암/언더핸드)
  - 우선순위: 상
  - 입력: BallProperties, InitialConditions, EnvironmentConditions
  - 출력: 파라미터 검증, 공기밀도 계산 결과 표시
  - 비고: 환경 변수로부터 공기밀도 자동 계산 (ρ = f(T, p, 습도))
  - 공기밀도 계산 공식:
    1. 포화 수증기압: e_s = 6.1078 * exp((17.27 * T) / (T + 237.3)) [hPa]
    2. 실제 수증기압: e = (humidity / 100) * e_s [hPa]
    3. 건조 공기 분압: p_d = pressure - e [hPa]
    4. 공기밀도: ρ = (p_d * 100) / (R_d * T_K) + (e * 100) / (R_v * T_K) [kg/m³]
       (R_d = 287.05 J/(kg·K), R_v = 461.495 J/(kg·K), T_K = T + 273.15)
    5. 결과 범위: ρ ≈ 1.1 ~ 1.3 kg/m³

FR-003: 물리 계산 엔진

[표 삽입: FR-003 상세 기능 명세표]
- 항목: 기능 ID, 기능명, 상세 설명, 우선순위, 처리 흐름, 성능 기준, 비고
- 내용:
  - 기능 ID: FR-003
  - 기능명: 물리 계산 엔진
  - 상세 설명: 중력, 항력, 마그누스 효과를 반영한 수치 적분 기반 궤적 계산
  - 우선순위: 상
  - 처리 흐름: 파라미터 입력 → 초기 상태 설정 → 시간 루프(dt=0.01s) → 힘 계산 → 적분(Euler/RK4) → 궤적 기록 → 결과 반환
  - 성능 기준: 계산 시간 < 100ms, 정확도 오차 < 5%
  - 비고: 플레이트 도달 또는 지면 충돌 시 종료

[다이어그램 삽입: 물리 엔진 계산 흐름도 (mermaid/9-physics-flowchart.mmd)]
- 흐름: 초기 상태 설정 → 반복 루프 시작 → 중력 계산 → 항력 계산 → 마그누스력 계산 → 총 힘 합산 → 수치 적분(Euler/RK4) → 위치/속도 업데이트 → 종료 조건 확인 → 반복 또는 종료

[코드 예시 삽입: 중력 계산 함수 (src/core/physics/forces.ts)]
```typescript
export function calculateGravity(mass: number, gravity: number): Vector3 {
  return {
    x: 0,
    y: -mass * gravity,
    z: 0
  };
}
```

[코드 예시 삽입: 항력 계산 함수 (src/core/physics/forces.ts)]
```typescript
export function calculateDrag(
  velocity: Vector3,
  airDensity: number,
  dragCoefficient: number,
  radius: number
): Vector3 {
  const area = Math.PI * radius * radius;
  const speed = magnitude(velocity);
  const dragMagnitude = 0.5 * airDensity * dragCoefficient * area * speed * speed;
  const velocityDirection = normalize(velocity);
  return multiply(velocityDirection, -dragMagnitude);
}
```

FR-004: 3D 시각화

[표 삽입: FR-004 상세 기능 명세표]
- 항목: 기능 ID, 기능명, 상세 설명, 우선순위, 렌더링 요소, 성능 기준, 비고
- 내용:
  - 기능 ID: FR-004
  - 기능명: 3D 시각화
  - 상세 설명: Three.js를 이용한 야구장, 공, 궤적의 실시간 3D 렌더링
  - 우선순위: 상
  - 렌더링 요소: 야구장(마운드, 홈플레이트), 공(구체), 궤적(라인), 그리드, 카메라 컨트롤(회전/줌/팬)
  - 성능 기준: 30fps 이상, 메모리 사용 < 500MB
  - 비고: OrbitControls로 자유로운 시점 조작 지원

[다이어그램 삽입: 컴포넌트 계층 구조 (mermaid/5-component-tree.mmd)]
- 계층: App → Scene3D → [Ball3D, TrajectoryLine, Field, Grid, Camera, Lights]

FR-005: 결과 분석

[표 삽입: FR-005 상세 기능 명세표]
- 항목: 기능 ID, 기능명, 상세 설명, 우선순위, 출력 데이터, 비고
- 내용:
  - 기능 ID: FR-005
  - 기능명: 결과 분석
  - 상세 설명: 시뮬레이션 결과 수치를 시각적으로 표시
  - 우선순위: 중
  - 출력 데이터: 비행 시간(초), 최고 높이(m), 플레이트 도달 높이(m), 수평/수직 변화량(cm), 스트라이크/볼 판정, 릴리즈 속도(km/h), 도착 속도(km/h), 회전수(rpm)
  - 비고: 결과 패널에 표 형식으로 표시

[표 삽입: 시뮬레이션 결과 데이터 예시표]
- 항목: 지표명, 단위, 예시값(직구), 예시값(커브볼)
- 예시 행: 비행 시간, 초, 0.45, 0.62
- 예시 행: 최고 높이, m, 1.62, 1.85
- 예시 행: 플레이트 높이, m, 0.95, 0.68
- 예시 행: 수평 변화량, cm, -8, +22
- 예시 행: 수직 변화량, cm, +15, -45
- 예시 행: 판정, -, Strike, Ball

FR-006: 물리력 벡터 시각화

[표 삽입: FR-006 상세 기능 명세표]
- 항목: 기능 ID, 기능명, 상세 설명, 우선순위, 시각화 요소, 색상 규칙, 비고
- 내용:
  - 기능 ID: FR-006
  - 기능명: 물리력 벡터 시각화
  - 상세 설명: 공에 작용하는 힘(중력, 항력, 마그누스력)을 3D 화살표로 실시간 표시
  - 우선순위: 중
  - 시각화 요소: 중력 화살표(아래 방향), 항력 화살표(속도 반대 방향), 마그누스 화살표(회전×속도 방향), 회전축 표시
  - 색상 규칙: 중력(파란색), 항력(빨간색), 마그누스력(녹색), 회전축(노란색)
  - 비고: 화살표 길이는 힘의 크기에 비례, 토글 버튼으로 표시/숨김 가능

FR-007: 리플레이 및 슬로우 모션

[표 삽입: FR-007 상세 기능 명세표]
- 항목: 기능 ID, 기능명, 상세 설명, 우선순위, 재생 옵션, 비고
- 내용:
  - 기능 ID: FR-007
  - 기능명: 리플레이 및 슬로우 모션
  - 상세 설명: 동일 조건의 시뮬레이션을 반복 재생하고 재생 속도 조절
  - 우선순위: 하
  - 재생 옵션: 재생/일시정지/정지, 재생 속도(0.5x, 1x, 2x), 특정 시점 이동(슬라이더)
  - UI 컴포넌트: ReplayControls
    * Play/Pause 버튼
    * 속도 조절 버튼 (0.5x, 1x, 2x)
    * 진행률 슬라이더 (드래그하여 특정 시점 이동)
    * 현재 시간 / 전체 시간 표시 (예: 1.2s / 3.5s)
  - 비고: 일시정지 중 힘 벡터 상세 분석 가능

[다이어그램 삽입: 리플레이 상태 전이도 (mermaid/4-state-diagram.mmd)]
- 상태: 정지 → 재생 중 → 일시정지 → 재생 중 → 종료

FR-008: 다중 카메라 앵글

[표 삽입: FR-008 상세 기능 명세표]
- 항목: 기능 ID, 기능명, 상세 설명, 우선순위, 카메라 모드, 비고
- 내용:
  - 기능 ID: FR-008
  - 기능명: 다중 카메라 앵글
  - 상세 설명: 다양한 시점에서 궤적 관찰
  - 우선순위: 하
  - 카메라 모드: 포수 시점(z=-18.44m), 투수 시점(z=0), 측면 시점(x=10m), 공 추적 모드(공을 따라가는 카메라)
  - UI 컴포넌트: CameraPresetButtons
    * 3가지 카메라 프리셋 버튼: 포수 시점, 측면, 투수 시점
    * 현재 활성화된 프리셋 강조 표시 (파란색 배경)
    * 화면 우측 상단 고정 배치
  - 비고: 버튼 클릭으로 카메라 전환, 부드러운 전환 애니메이션 (1초)

FR-009: 사용자 계정 시스템

[표 삽입: FR-009 상세 기능 명세표]
- 항목: 기능 ID, 기능명, 상세 설명, 우선순위, 인증 방식, API 엔드포인트, 비고
- 내용:
  - 기능 ID: FR-009
  - 기능명: 사용자 계정 시스템
  - 상세 설명: 회원가입, 로그인, 로그아웃 기능
  - 우선순위: 중
  - 인증 방식: JWT (JSON Web Token), 액세스 토큰 만료 1시간, 리프레시 토큰 만료 7일
  - API 엔드포인트: POST /api/auth/register, POST /api/auth/login, POST /api/auth/logout
  - 비고: 비밀번호는 bcrypt로 해시 저장

[다이어그램 삽입: 사용자 인증 흐름도 (mermaid/10-auth-flow.mmd)]
- 흐름: 사용자 로그인 요청 → 서버 인증 검증 → JWT 토큰 발급 → 클라이언트 저장 → API 요청 시 토큰 포함 → 서버 토큰 검증 → 요청 처리

FR-010: 시뮬레이션 저장 및 공유

[표 삽입: FR-010 상세 기능 명세표]
- 항목: 기능 ID, 기능명, 상세 설명, 우선순위, 저장 제한, API 엔드포인트, 비고
- 내용:
  - 기능 ID: FR-010
  - 기능명: 시뮬레이션 저장 및 공유
  - 상세 설명: 로그인 사용자가 시뮬레이션 파라미터를 저장하고 URL로 공유
  - 우선순위: 중
  - 저장 제한: 사용자당 최대 10개
  - API 엔드포인트: POST /api/simulations/save, GET /api/simulations/:id, GET /api/share/:shareToken
  - 비고: 공유 URL 생성 시 고유 토큰 발급 (예: /share/abc123)

FR-011: 미니게임 - 스트라이크 존 챌린지

[표 삽입: FR-011 상세 기능 명세표]
- 항목: 기능 ID, 기능명, 상세 설명, 우선순위, 게임 규칙, 점수 계산, 비고
- 내용:
  - 기능 ID: FR-011
  - 기능명: 미니게임 - 스트라이크 존 챌린지
  - 상세 설명: 스트라이크 존 중심을 맞추는 챌린지 모드
  - 우선순위: 하
  - 게임 규칙: 10회 투구, 스트라이크 존 중심에 가까울수록 높은 점수
  - 점수 계산: 중심으로부터 거리(cm) 기준, 0-5cm: 100점, 5-10cm: 80점, 10-20cm: 50점, 20+cm: 0점
  - 비고: 로그인 사용자만 점수 저장 가능

FR-012: 리더보드 및 랭킹

[표 삽입: FR-012 상세 기능 명세표]
- 항목: 기능 ID, 기능명, 상세 설명, 우선순위, 표시 항목, API 엔드포인트, 비고
- 내용:
  - 기능 ID: FR-012
  - 기능명: 리더보드 및 랭킹
  - 상세 설명: 미니게임 점수 기준 상위 100명 순위 표시
  - 우선순위: 하
  - 표시 항목: 순위, 닉네임, 점수, 기록 날짜
  - API 엔드포인트: GET /api/leaderboard?gameType=strike_zone_challenge&limit=100
  - 비고: 실시간 갱신, 본인 순위 하이라이트

FR-013: 확장 가능한 아키텍처 시스템

[표 삽입: FR-013 상세 기능 명세표]
- 항목: 기능 ID, 기능명, 상세 설명, 우선순위, 설계 패턴, 코드 재사용률 목표, 비고
- 내용:
  - 기능 ID: FR-013
  - 기능명: 확장 가능한 아키텍처 시스템
  - 상세 설명: 신규 물리 시나리오(포물선 운동, 진자 운동 등) 추가 시 최소한의 코드 작성으로 확장 가능
  - 우선순위: 상
  - 설계 패턴: Generic 타입 시스템, BaseSimulator 추상 클래스, Template Method 패턴, Context Factory 패턴
  - 코드 재사용률 목표: 80% 이상

FR-014: 비교 모드 (v2 신규)

[표 삽입: FR-014 상세 기능 명세표]
- 항목: 기능 ID, 기능명, 상세 설명, 우선순위, 주요 기능, 오류 처리, 비고
- 내용:
  - 기능 ID: FR-014
  - 기능명: 비교 모드
  - 상세 설명: 저장된 2개 시뮬레이션을 동시 실행하여 궤적과 계측값을 비교
  - 우선순위: 중
  - 주요 기능:
    1) 저장 목록에서 2개 데이터 선택 (중복 불가)
    2) 환경 변수 설정: 독립(각자 환경) / 통일(한쪽 환경 적용)
    3) 2개 궤적 동시 렌더링 (파랑/빨강 색상 구분)
    4) 계측값 표: 시간별/거리별 필터, 차이값(Δ) 표시
    5) 리플레이 동기화: 두 궤적 동시 재생
  - 오류 처리:
    - 저장 데이터 0개/1개 → 에러 메시지
    - 중복 선택 → UI 차단
    - 시나리오 타입 불일치 → DB 필터링
    - 삭제된 데이터 선택 → 재확인 후 에러
  - 비고: 교육적 가치 - 파라미터 변화 영향 직관적 학습
  - 비고: src/core/ 하위의 physics, renderer, ui 컴포넌트는 시나리오 독립적으로 설계

FR-015: UI 네비게이션 및 도움말 시스템

[표 삽입: FR-015 상세 기능 명세표]
- 항목: 기능 ID, 기능명, 상세 설명, 우선순위, 주요 컴포넌트, 비고
- 내용:
  - 기능 ID: FR-015
  - 기능명: UI 네비게이션 및 도움말 시스템
  - 상세 설명:
    * 상단 네비게이션 바: 뒤로가기 버튼, 시나리오 이름 표시, 도움말 버튼, 사용자 메뉴
    * 우측 패널 탭 구조: 파라미터/결과/최근 실험/비교 4개 탭으로 구성
    * 도움말 모달: 시작 가이드, 키보드 단축키 (Space/R/Esc/1-5/화살표), FAQ
    * 탭 전환 애니메이션 및 스크롤 영역 분리
  - 우선순위: 중
  - 주요 컴포넌트: TopNavigationBar, TabContainer, HelpModal
  - 입력: 사용자 클릭 이벤트
  - 출력: 탭 전환, 모달 표시, 네비게이션
  - 비고: 사용자 경험 개선을 위한 UI 구조 개선

FR-016: 최근 실험 관리 시스템 (LocalStorage)

[표 삽입: FR-016 상세 기능 명세표]
- 항목: 기능 ID, 기능명, 상세 설명, 우선순위, 저장 방식, 주요 기능, 비고
- 내용:
  - 기능 ID: FR-016
  - 기능명: 최근 실험 관리 시스템 (클라이언트 저장)
  - 상세 설명:
    * LocalStorage 기반 클라이언트 저장 (최대 10개, 초과 시 자동 삭제)
    * 실험 저장: 이름 지정 모달, 파라미터 + 결과 함께 저장
    * 실험 불러오기: 파라미터 자동 복원, 원클릭 재실행
    * 실험 삭제: 개별 삭제, 전체 삭제
    * 상세 보기: 모든 파라미터 및 결과 수치 표시 (모달)
    * 실험 정보 표시: 속도, 회전, 스트라이크 판정 요약
  - 우선순위: 중
  - 저장 방식: LocalStorage (키: recentExperiments)
  - 주요 기능: 저장/불러오기/삭제/상세보기
  - 입력: 실험 이름, 현재 파라미터 및 결과
  - 출력: 저장 완료 메시지, 실험 목록
  - 비고: FR-010 (서버 저장)과 별도로 클라이언트 로컬 저장 지원, 로그인 불필요

[다이어그램 삽입: 시스템 아키텍처 다이어그램 (mermaid/1-architecture.mmd)]
- 계층: Presentation Layer (React UI) → Application Layer (SimulationContext) → Domain Layer (Physics Engine) → Infrastructure Layer (Three.js Renderer)


3.4 성능 요구사항

3.4.1 처리 속도 및 시간

[표 삽입: 성능 요구사항 처리 속도 명세표]
- 항목: 성능 지표, 목표값, 측정 방법, 우선순위
- 예시 행: 물리 계산 시간, < 100ms, 1000회 반복 평균, 상
- 예시 행: 3D 렌더링 FPS, ≥ 30fps, Chrome DevTools Performance, 상
- 예시 행: 초기 로딩 시간, < 3초, Lighthouse, 중
- 예시 행: API 응답 시간, < 500ms, 서버 로그, 중

3.4.2 처리량

[표 삽입: 성능 요구사항 처리량 명세표]
- 항목: 처리량 지표, 목표값, 측정 환경, 비고
- 예시 행: 동시 사용자 수, 100명, 클라우드 서버 기준, 초기 목표
- 예시 행: 시뮬레이션 실행 횟수, 1000회/일, 단일 사용자 기준, 무제한
- 예시 행: API 요청 처리량, 100 req/s, 백엔드 서버, 로그인/저장 API
- 예시 행: 데이터베이스 쿼리, < 50ms, PostgreSQL, 인덱스 최적화 필요

3.4.3 자원 사용량 (저사양 PC 최적화)

[표 삽입: 성능 요구사항 자원 사용량 명세표]
- 항목: 자원 종류, 목표 사용량, 측정 환경, 최적화 방법
- 예시 행: CPU 사용률, < 50%, Intel Core i3 9세대, 물리 계산 최적화
- 예시 행: 메모리 사용량, < 500MB, Chrome 브라우저, 3D 모델 경량화
- 예시 행: GPU 사용률, < 30%, 통합 그래픽, 폴리곤 수 최소화
- 예시 행: 네트워크 대역폭, < 5MB/세션, 첫 로딩 기준, 에셋 압축

저사양 최적화 전략:
  - 3D 모델 폴리곤 수 최소화 (<300개, 기존 1000개에서 감소)
  - 그림자 품질: shadow-mapSize 1024 (2048에서 감소)
  - 목표 프레임레이트: 30fps (50fps에서 조정)
  - TrajectoryLine 포인트 간격 증가
  - React.memo 적용 (Ball3D, TrajectoryLine)
  - 텍스처 압축 및 해상도 조절
  - LOD (Level of Detail) 적용
  - 불필요한 그림자/반사 효과 제거
  - 파티클 효과 최소화


3.5 인터페이스 요구사항

3.5.1 사용자 인터페이스 요구사항

UI-001: 레이아웃 구조
  - 좌측: 3D 뷰어 (전체 화면의 70%)
  - 우측: 컨트롤 패널 (30%, 스크롤 가능)
    - 상단: 입력 패널
    - 하단: 결과 패널

UI-002: 반응형 디자인
  - 최소 화면 크기: 1366 x 768
  - 모바일 지원: 1차 버전 제외

UI-003: 색상 및 테마
  - 다크 테마 (배경: #16213e, #1a1a2e)
  - 강조 색상: 녹색 (#4caf50)
  - 가독성 확보: 명도 대비 4.5:1 이상

UI-004: 접근성
  - 모든 버튼에 텍스트 라벨 포함
  - 키보드 네비게이션 지원 (Tab, Enter)
  - 색맹 사용자 고려 (색상만으로 정보 전달 금지)

3.5.2 시스템 인터페이스 요구사항

SI-001: 브라우저 API
  - WebGL 2.0: 3D 렌더링
  - requestAnimationFrame: 애니메이션
  - localStorage: 사용자 설정 저장 (선택)

SI-002: 외부 라이브러리
  - React: UI 프레임워크
  - Three.js: 3D 그래픽
  - Styled-components: 스타일링

3.5.3 하드웨어 인터페이스

  - 마우스: 3D 뷰 컨트롤
  - 키보드: 입력 및 네비게이션
  - 디스플레이: WebGL 지원 모니터


3.6 데이터 요구사항

3.6.1 데이터 식별

내부 데이터 (클라이언트 메모리):
  - 시뮬레이션 파라미터 (PitchParameters)
  - 궤적 데이터 (Vector3 배열)
  - UI 상태 (uiMode, isSimulating)

정적 데이터:
  - 구종별 입력 예시 가이드 (구종 프리셋은 제거됨)
  - 물리 상수 (PHYSICS_CONSTANTS)
  - 3D 모델 (간단한 실루엣만)

데이터베이스 (PostgreSQL/MongoDB):
  - 사용자 계정 정보 (User)
  - 저장된 시뮬레이션 (SavedSimulation)
  - 미니게임 점수 (GameScore)
  - 공유 시뮬레이션 (SharedSimulation)

3.6.2 데이터 관리

  - 저장 방식:
    - 클라이언트: 세션 메모리 (휘발성)
    - 서버: PostgreSQL/MongoDB (영구 저장)
  - 백업:
    - DB 일간 자동 백업
    - 백업 보관 기간: 7일
  - 데이터 보존:
    - 사용자 계정: 탈퇴 시까지
    - 시뮬레이션 기록: 최대 10개 (초과 시 자동 삭제)
    - 미니게임 점수: 영구 보관
  - 확장성:
    - 입력 예시 가이드 추가/수정 시 메타데이터 업데이트
    - DB 스키마 마이그레이션 지원

3.6.3 도메인 데이터 모델

클라이언트 엔티티:

1. PitchParameters (투구 파라미터)
   - mass: number (공 질량)
   - radius: number (공 반지름)
   - initialSpeed: number (초기 속도)
   - releaseAngle: number (릴리즈 각도)
   - spinRate: number (회전수)
   - spinAxis: Vector3 (회전축)
   - 환경 변수 (중력, 공기 밀도 등)

2. SimulationResult (시뮬레이션 결과)
   - trajectory: Vector3[] (궤적)
   - flightTime: number (비행 시간)
   - maxHeight: number (최고 높이)
   - plateHeight: number (플레이트 높이)
   - releaseSpeed: number (릴리즈 순간 속도)
   - arrivalSpeed: number (도착 순간 속도)
   - isStrike: boolean (스트라이크 판정)

3. Vector3 (3D 벡터)
   - x: number
   - y: number
   - z: number

데이터베이스 엔티티 (ERD):

[ERD 다이어그램 삽입: 데이터베이스 구조 (mermaid/3-erd.mmd)]
- 엔티티: User, SavedSimulation, GameScore, SharedSimulation
- 관계: User 1:N SavedSimulation, User 1:N GameScore, SavedSimulation 1:1 SharedSimulation

1. User (사용자)
   - id: UUID (PK)
   - email: string (unique)
   - password: string (bcrypt 해시)
   - nickname: string
   - createdAt: timestamp
   - updatedAt: timestamp

2. SavedSimulation (저장된 시뮬레이션)
   - id: UUID (PK)
   - userId: UUID (FK → User.id)
   - name: string
   - parameters: JSON (PitchParameters)
   - createdAt: timestamp
   - 제약: 사용자당 최대 10개

3. GameScore (미니게임 점수)
   - id: UUID (PK)
   - userId: UUID (FK → User.id)
   - gameType: string ('strike_zone_challenge')
   - score: integer
   - playedAt: timestamp
   - 인덱스: (gameType, score DESC)

4. SharedSimulation (공유 시뮬레이션)
   - id: UUID (PK)
   - simulationId: UUID (FK → SavedSimulation.id)
   - shareToken: string (unique, URL에 사용)
   - viewCount: integer
   - createdAt: timestamp


3.7 테스트 요구사항

3.7.1 단위 테스트

[표 삽입: 단위 테스트 명세표]
- 항목: 테스트 대상, 테스트 항목, 예상 결과, 도구
- 예시 행: calculateGravity(), 질량 0.145kg 입력, y방향 -1.42N 반환, Jest
- 예시 행: calculateDrag(), 속도 40m/s 입력, 음의 속도 방향 힘 반환, Jest
- 예시 행: eulerIntegrate(), 단순 등가속도 운동, 위치 오차 < 1%, Jest
- 예시 행: rk4Integrate(), 단순 등가속도 운동, 위치 오차 < 0.1%, Jest

3.7.2 통합 테스트

[표 삽입: 통합 테스트 명세표]
- 항목: 테스트 시나리오, 테스트 절차, 예상 결과, 도구
- 예시 행: 단순 모드 시뮬레이션, throwPower=7, pitchType=fastball 입력 → 시뮬레이션 실행, 궤적 생성, 결과 표시, Cypress
- 예시 행: 회원가입 → 로그인 → 시뮬레이션 저장, 각 단계 API 호출, 저장 성공, DB에 데이터 존재, Postman
- 예시 행: 3D 렌더링 파이프라인, 궤적 데이터 전달 → Ball3D 애니메이션, 30fps 이상 렌더링, Chrome DevTools

3.7.3 성능 테스트

  - 시뮬레이션 1000회 반복 실행 → 평균 시간 < 100ms
  - 3D 렌더링 10분간 연속 실행 → 메모리 누수 없음
  - 브라우저 호환성 테스트 (Chrome, Firefox, Edge, Safari)

3.7.4 사용자 수용 테스트 (UAT)

  - 물리 비전공 학생 5명 대상 사용성 테스트
  - 5분 내 단순 모드 시뮬레이션 성공률 > 90%
  - 인터페이스 만족도 설문 (5점 척도) > 3.5점


3.8 보안 요구사항

3.8.1 인증 및 권한

  - 인증:
    - JWT (JSON Web Token) 기반 인증
    - 액세스 토큰 만료 시간: 1시간
    - 리프레시 토큰 만료 시간: 7일
  - 권한:
    - 비로그인 사용자: 시뮬레이션 실행만 가능
    - 로그인 사용자: 저장, 공유, 미니게임 참여 가능
    - 본인 데이터만 수정/삭제 가능

3.8.2 데이터 보안

  - 개인정보:
    - 수집 항목: 이메일, 닉네임 (최소한의 정보만)
    - 비밀번호 암호화: bcrypt (salt rounds: 10)
    - 이메일 암호화 저장 (AES-256)
  - 입력 검증:
    - 클라이언트 + 서버 이중 검증
    - 파라미터 범위 검증 (악의적 입력 차단)
      - 속도: 0 ~ 100 m/s
      - 회전수: 0 ~ 5000 rpm
      - 각도: -90 ~ 90도
    - SQL Injection 방지 (Prepared Statement)
    - XSS 방지 (입력 이스케이프)

3.8.3 네트워크 보안

  - HTTPS: 프로덕션 배포 시 필수
  - CORS: 동일 출처 정책 준수
  - XSS 방지: React의 자동 이스케이프 활용

3.8.4 클라이언트 보안

  - 외부 라이브러리 취약점 정기 점검 (npm audit)
  - 신뢰된 CDN만 사용 (Three.js 등)


3.9 품질 요구사항

3.9.1 신뢰성 (Reliability)

[표 삽입: 신뢰성 품질 속성 명세표]
- 항목: 품질 지표, 목표값, 측정 방법
- 예시 행: 물리 계산 정확도, 이론값 대비 오차 < 5%, 단순 포물선 운동 비교
- 예시 행: 시스템 가용성, 99% 이상, 서버 모니터링 (Uptime)
- 예시 행: 평균 무고장 시간 (MTBF), > 720시간 (30일), 오류 로그 분석
- 예시 행: 오류 복구 시간 (MTTR), < 1시간, 서버 재시작 시간

3.9.2 사용성 (Usability)

[표 삽입: 사용성 품질 속성 명세표]
- 항목: 품질 지표, 목표값, 측정 방법
- 예시 행: 학습 시간, 5분 내 단순 모드 시뮬레이션 성공, 사용자 테스트
- 예시 행: 인터페이스 만족도, 5점 척도 평균 > 3.5점, 설문 조사
- 예시 행: 오류 메시지 이해도, 80% 이상 사용자가 오류 원인 파악, 사용자 인터뷰
- 예시 행: 접근성 준수, WCAG 2.1 Level A, 자동 검사 도구

3.9.3 유지관리성 (Maintainability)

[표 삽입: 유지관리성 품질 속성 명세표]
- 항목: 품질 지표, 목표값, 측정 방법
- 예시 행: 코드 복잡도, Cyclomatic Complexity < 10, ESLint
- 예시 행: 코드 커버리지, > 70%, Jest Coverage Report
- 예시 행: 문서화 수준, 모든 public 함수에 JSDoc 주석, 코드 리뷰
- 예시 행: 버그 수정 시간, 평균 < 2일, GitHub Issues 추적

3.9.4 이식성 (Portability)

[표 삽입: 이식성 품질 속성 명세표]
- 항목: 품질 지표, 목표값, 측정 방법
- 예시 행: 브라우저 호환성, Chrome, Firefox, Edge, Safari 지원, 실제 테스트
- 예시 행: 플랫폼 독립성, Windows, macOS, Linux 모두 동작, 실제 테스트
- 예시 행: 신규 시나리오 추가 시간, < 2주 (개발자 1명 기준), 2차 모듈 개발 시 측정
- 예시 행: 코드 재사용률, > 80%, 소스 코드 분석


3.10 제약사항

3.10.1 시스템 개발 제약사항

  - 프로그래밍 언어: TypeScript (JavaScript의 정적 타입 버전)
  - 프레임워크: React 18.x
  - 빌드 도구: Vite
  - 개발 방법론: 애자일

3.10.2 설계 제약사항

  - 아키텍처:
    - 프론트엔드: React + TypeScript (클라이언트 물리 계산)
    - 백엔드: Node.js + Express (사용자 관리, 데이터 저장)
    - 확장 가능한 구조: Generic 타입 시스템, BaseSimulator 추상 클래스를 통한 신규 시나리오 추가 용이
    - 재사용성 목표: 새 시나리오 추가 시 80% 이상 코드 재사용
  - 상태 관리: React Context API (시나리오별 Context Factory 패턴 적용)
  - 물리 엔진:
    - 1차 모듈(투구): 자체 개발 물리 엔진
    - 2차 모듈 이후: 필요 시 Cannon.js 등 외부 엔진 도입 검토 가능
    - 교육 목적 달성을 위한 물리 계산 투명성 확보

3.10.3 표준 제약사항

  - 웹 표준: HTML5, CSS3, ES6+ 준수
  - 접근성: WCAG 2.1 Level A 이상
  - 코딩 스타일: Airbnb TypeScript Style Guide

3.10.4 업무 제약사항

  - 개발 기간: 3개월 (2025.09 ~ 2025.11)
  - 팀 규모: 2명 (ㅇㅇㅎ, ㄱㅌㅎ)


3.11 프로젝트 관리 요구사항

3.11.1 사업 수행조직

프로젝트 팀 구성:
- 개발 인원: 2명
- 개발 기간: 2025년 9월 ~ 2025년 11월 (3개월)

[표 삽입: 프로젝트 조직 구조표]
- 항목: 역할, 책임, 담당자, 필요 역량
- 예시 행: 프론트엔드 개발자, React/TypeScript 개발, ㅇㅇㅎ, React, Three.js 경험
- 예시 행: 백엔드 개발자, Node.js API 개발, DB 설계, ㄱㅌㅎ, Node.js, PostgreSQL 경험
- 예시 행: 물리 엔진 개발자, 물리 계산 로직 구현, ㅇㅇㅎ, 물리학 지식, 수치 해석
- 예시 행: 3D 렌더링 개발자, Three.js 구현, ㄱㅌㅎ, Three.js, WebGL 경험

※ 소규모 팀으로 각 팀원이 여러 역할 겸임

3.11.2 프로젝트 관리 방법론

  - 버전 관리: Git + GitHub
  - 이슈 트래킹: GitHub Issues
  - 문서 관리: Markdown (GitHub Wiki)
  - 코드 리뷰: Pull Request 기반
  - 품질 관리: ESLint + TypeScript 타입 체크

3.11.3 프로젝트 일정 계획 (WBS) - 3개월 (12주)

[표 삽입: 프로젝트 WBS 및 일정표]
- 항목: 단계, 작업명, 기간, 담당, 산출물
- 예시 행: 1주차, 요구사항 분석 및 설계, 1주, PM/전체, 요구사항 명세서, 아키텍처 설계서
- 예시 행: 2-3주차, 물리 엔진 개발, 2주, 물리 개발자, integrator.ts, forces.ts, simulator.ts
- 예시 행: 4-5주차, 3D 렌더링 개발, 2주, 프론트엔드, Scene3D, Ball3D, TrajectoryLine
- 예시 행: 6-7주차, UI 개발 (단순/전문가 모드), 2주, 프론트엔드, InputPanel, ResultPanel
- 예시 행: 8-9주차, 백엔드 개발 (인증, 저장), 2주, 백엔드, User API, Simulation API
- 예시 행: 10주차, 통합 테스트, 1주, 전체, 테스트 보고서
- 예시 행: 11주차, 미니게임 및 리더보드 개발, 1주, 프론트/백엔드, 게임 로직, 랭킹 API
- 예시 행: 12주차, 최종 테스트 및 배포, 1주, 전체, 배포 완료


3.12 프로젝트 지원 요구사항

3.12.1 사용자 교육 및 지원

  - 사용자 매뉴얼: 온라인 문서 (Markdown)
  - 튜토리얼 비디오: 5분 분량 시연 영상
  - FAQ: 자주 묻는 질문 10개 이상

3.12.2 유지보수

  - 하자보수 기간: 프로젝트 종료 후 1개월
  - 버그 수정: GitHub Issues를 통한 보고 및 처리
  - 기능 개선: 2차 버전 개발 시 반영


4. 요구사항 상세 내역 작성 및 검토

4.1 요구사항 상세 내역 작성 예시

요구사항 ID: FR-003-01

[표 삽입: 요구사항 상세 내역 작성 예시표]
- 항목: 요구사항 ID, 기능명, 상세 설명, 우선순위, 입력, 처리, 출력, 비기능 요구사항, 테스트 케이스, 추적성
- 내용:
  - 요구사항 ID: FR-003-01
  - 기능명: 중력 계산
  - 상세 설명: 공에 작용하는 중력을 F = m × g로 계산
  - 우선순위: 상
  - 입력: mass (kg), gravity (m/s²)
  - 처리: Vector3 { x: 0, y: -mass × gravity, z: 0 } 생성
  - 출력: 중력 벡터 (Vector3)
  - 비기능 요구사항: 계산 시간 < 1ms
  - 테스트 케이스: mass=0.145, gravity=9.81 → y = -1.42N
  - 추적성: BR-001 (물리 시뮬레이션 교육 목표)


[다이어그램 삽입: 시뮬레이션 실행 순서도 (mermaid/2-simulation-sequence.mmd)]
- 시퀀스: 사용자 → UI → SimulationContext → PitchSimulator → PhysicsEngine → Three.js Renderer → 사용자

[다이어그램 삽입: 데이터 흐름도 (mermaid/7-data-flow.mmd)]
- 흐름: 입력 파라미터 → 물리 계산 → 궤적 데이터 → 3D 렌더링 → 결과 분석 → 사용자

[다이어그램 삽입: API 엔드포인트 구조 (mermaid/6-api-endpoints.mmd)]
- 엔드포인트: POST /api/auth/register, POST /api/auth/login, POST /api/simulations/save, GET /api/simulations/:id, GET /api/leaderboard, POST /api/game/score

[다이어그램 삽입: 배포 구조 다이어그램 (mermaid/8-deployment.mmd)]
- 구성: 클라이언트 브라우저 ↔ CDN (정적 리소스) ↔ 웹 서버 (Node.js) ↔ 데이터베이스 (PostgreSQL)


5. 용어 사전

[표 삽입: 용어 사전]
- 항목: 용어, 영문명, 정의, 비고
- 예시 행: 중력, Gravity, 물체를 지구 중심 방향으로 끌어당기는 힘 (F = mg), 9.81 m/s²
- 예시 행: 항력, Drag Force, 공기저항으로 인해 속도 반대 방향으로 작용하는 힘, 속도의 제곱에 비례
- 예시 행: 마그누스 효과, Magnus Effect, 회전하는 공에 작용하는 양력, 야구 공의 변화구 원리
- 예시 행: 수치 적분, Numerical Integration, 미분방정식을 근사적으로 푸는 방법, Euler, RK4 등
- 예시 행: 오일러 방법, Euler Method, 1차 수치 적분 방법, 빠르지만 오차 큼
- 예시 행: 룽게-쿠타 방법, Runge-Kutta Method, 4차 수치 적분 방법, 정확하지만 느림
- 예시 행: 스트라이크 존, Strike Zone, 홈플레이트 상공의 스트라이크 판정 영역, 너비 0.44m, 높이 0.5-1.1m
- 예시 행: 회전수, Spin Rate, 공의 회전 속도 (rpm), 변화구 효과에 영향
- 예시 행: 회전축, Spin Axis, 공의 회전 방향을 나타내는 3D 벡터, 정규화된 단위 벡터
- 예시 행: 릴리즈 포인트, Release Point, 투수가 공을 놓는 순간의 위치, 마운드 위치 (z=0)
- 예시 행: 플레이트, Home Plate, 홈플레이트 위치, 마운드로부터 18.44m (z=-18.44m)
- 예시 행: 구종, Pitch Type, 투구 종류, 직구, 커브, 슬라이더, 체인지업 등
- 예시 행: WebGL, Web Graphics Library, 웹 브라우저에서 3D 그래픽을 렌더링하는 API, Three.js가 활용
- 예시 행: Three.js, -, JavaScript 기반 3D 그래픽 라이브러리, WebGL 래퍼
- 예시 행: JWT, JSON Web Token, 웹 인증에 사용되는 토큰 방식, 액세스/리프레시 토큰

[끝]
